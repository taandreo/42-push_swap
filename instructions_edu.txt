1º passo - Validar os argumentos:
 1. qualquer caracter sem ser numeros ou espaços tem que printar error. Ex: ./push_swap "   2" "   1  "
printa ra ou sa ou rra
pus_swap "    2 a" "    1"
printa Error
 2. verificar se o push_swap faz a validação correta quando recebe apenas um sinal. Ex: push_swap 3 1 "+"
deve printar Error
 3. Validar se tem argumentos numéricos repetidos. push_swap 1 "    2     1" deve printar Error
 4.Não pode aceitar sinais repetidos, apenas 1 por número. Ex: push_swap --1 deve printar Error
 5. receber apenas espaços entre aspas deve printar error. Ex: push_swap "    " printa Error

2º passo - Inicializar a lista com os argumentos:
- Em um stack a teoria é LIFO(Last In First Out) então vc tem que colocar no stacks os argumentos recebidos de tras pra frente. Ex: push_swap 3 2 1 vai inserir no stack primeiro o 1, depois o 2, depois o 3 ficando como Top ou Head do stack o 3.

3º passo - Indexar a lista de argumentos:
- Indexar a lista de argumentos do menor numero ao maior numero começando do 0, sem alterar a ordem da lista.

4º passo - Criar os markups
- Existe o markup por Index e o markup por Maior Que (Greater Than)
- Os markups consistem em fazer um loop por cada elemento do stack A pra decedir quais serão mantidos na stack A e quais vão pra stack B(pb)
- No markup por Index, começando pelo primeiro elemento da stack A verificamos se o próximo elemento é igual ao index do elemento + 1 e vamos adicionando os elementos que vão ficar na stack A, ao terminar a lista, setamos o markup como o próximo elemento e verificamos o numero de elementos que ficarão na stack A. Verificamos então em qual posição possui o maior número de elementos que vão se manter na stack A. Ex:
  Stack A | Index |  Mantem no A
->  1        0    |   True
    5        3        False
    2        1        True 
- Após descobrir o maior número de elementos que precisa ficar na stack A, vamos decidir como faremos para pushar os elemento pra stack B. o Algorítmo é esse:
  While(tem elementos pra pushar pra b[mantém no A false])
  {
      IF(for preciso fazer sa)
      {
        perform sa(swap a)
        atualize o markup(seja ele por index ou por greater than)
      }
      ELSE IF o head da stack A tem o elemento (mantem_no_a) setado como false {
        perform pb(push b)  
      }
      ELSE
        perform ra(rotate a)
  }
- depois que não houver mais elementos na stack A que precisam ser pushado pra stack B, precisamos colocar todos os elementos da stack B na stack A, calculando exatamente a posição correta em que o elemento da stack B deve ficar na stack A e entre todos os elementos da stack B qual tera o menor número de movimentos para essa operação.

- todos esse movimentos são salvos numa struct (tanto da stack a quanto da stack B) para depois copararmos qual markup tem o menor número de movimentos. o markup greater than é igual ao do Index, porém verificamos apenas se o próximo elemento é maior que o elemento anterior e não exatamento o anterior + 1, como era no markup de index.
```